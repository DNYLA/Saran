generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String        @id
  lastFMName String?
  lastFMTag  String?
  donator    Boolean       @default(false)
  afkMessage String?
  afkTime    DateTime?
  guilds     GuildUser[]
  Artists    UserArtists[]
  Albums     UserAlbums[]
  Tracks     UserTracks[]
}

model GuildUser {
  userId             String
  displayName        String?
  serverId           String
  lastFMTag          String?
  reactionBoardScore Int      @default(0)
  xp                 Int      @default(0)
  customBoostRoleId  String?
  isBooster          Boolean  @default(false)
  preJailedRoles     String[]
  inactive           Boolean  @default(false) //Inactive is whenever a user leaves or gets kicked from a guild.
  user               User     @relation(fields: [userId], references: [id])
  @@id([userId, serverId])
}

model GuildConfig {
  id                   String                  @id
  prefix               String                  @default(",")
  reactionBoardChannel String?
  reactionBoardLimit   Int                     @default(0)
  jailChannel          String?
  jailLogChannel       String?
  jailRole             String?
  rbMessages           ReactionBoardMessages[]
}

model ReactionBoardMessages {
  serverId       String
  reactionName   String
  reactions      Int         @default(0)
  userId         String
  messageId      String
  embedMessageId String
  guild          GuildConfig @relation(fields: [serverId], references: [id])

  @@id([messageId, serverId])
}

model UserTracks {
  trackId    Int    @id @default(autoincrement())
  userId     String
  name       String
  artistName String
  plays      Int
  user       User   @relation(fields: [userId], references: [id])
}

model UserAlbums {
  albumId    Int    @id @default(autoincrement())
  userId     String
  name       String
  artistName String
  plays      Int
  user       User   @relation(fields: [userId], references: [id])
}

model UserArtists {
  artistId Int    @id @default(autoincrement())
  userId   String
  name     String
  plays    Int
  user     User   @relation(fields: [userId], references: [id])
}
